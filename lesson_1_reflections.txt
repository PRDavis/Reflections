How did viewing a diff between two versions of a file help you see the bug that
was introduced?

    The differences were clearly highlighted.

How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

    It will save re-work if a file is lost. Also, if a code change gives unexpected results,
    you can revert to a previous version.

What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

    pros: you can commit at logical points
    cons: users could commit either too often or not often enough

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

    coding centric systems save repositories to reflect changes to multiple files
    where non-coding centric systems do not recognize the relationships of repositories

How can you use the commands git log and git diff to view the history of files?

    git log gives a list of recent commits and with git diff you can compare 2 commits to see what changed

How might using version control make you more confident to make changes that
could break something?

    You should always have a working version to fall back to.

Now that you have your workspace set up, what do you want to try using Git for?

    I think it will be useful for version control. It will be especially usefull for when making
    changes that could potentially break the code I already have. 
